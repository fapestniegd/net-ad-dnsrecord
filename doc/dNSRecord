# http://www.indented.co.uk/index.php/2009/06/18/mapping-the-dnsrecord-attribute/
# (Saving in case the blog evaporates)

Mapping the DNSRecord attribute

Posted by Chris on June 18, 2009 in Active Directory, Microsoft DNS | Tags :Active Directory, dnsRecord, Microsoft DNS

Microsoft DNS is able to store records in Active Directory when running on a Domain Controller. The information is stored in a Binary Large Object (BLOB) called DNSRecord. No official maps for that attribute appear to have been published. The information below is a result of reverse engineering the contents of the attribute.

Michael Smith has a very pretty PowerShell script which uses the structures below, and a few more, to convert the DnsRecord attribute into a human readable format on his blog, Michael\u2019s meanderings\u2026.

Update 02/02/2010: In December 2009, Microsoft released a (not entirely accurate) protocol specification including details of dnsRecord and dnsProperty: MS-DNSP.pdf
About the mapped structure

The map created below for DNSRecord is incomplete, the remaining values seem to defy testing. While the map below is probably accurate I reserve the right to be wrong. Despite that, the structures can be used to manually construct or decode DNSRecords via LDAP rather than using the GUI, dnscmd or WMI. Edit: The map is now complete.
About DNSRecord

The dnsRecord attribute appears on dnsNode objects. The dnsRecord attribute is multi-valued. This means that each node can contain more than one record. This is most obvious for the node representing \u201csame as parent folder\u201d which will hold the NS records and SOA records as a minimum.
Structures: DNSRecord

The DNSRecord attribute is comprised of the fields described in the table below.
Field Name 	Length (Bytes) 	Format 	Description
RData Length 	2 	Little Endian 	Length of the Record Data block
Type 	2 	Little Endian 	Record type. Matches published type values on IANA
Unknown (1) 	4 	N/A 	Predictable, but unknown.
UpdatedAtSerial 	4 	Little Endian 	Changes to match the serial number in the SOA whenever the record is modified
TTL 	4 	Big Endian 	Time To Live value for the record
Unknown (2) 	4 	N/A 	Always 0
TimeStamp 	4 	Little Endian 	TimeStamp in hours from 01/01/1601 00:00:00
RData 	Variable 	Variable 	The record data, formatting described below

These values produce the following binary array.
view source
print?
01	                                1  1  1  1  1  1
02	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
03	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
04	|                 RDATA LENGTH                  |
05	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
06	|                      TYPE                     |
07	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
08	|                  UNKNOWN (1)                  |
09	|                                               |
10	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
11	|                 UPDATEDATSERIAL               |
12	|                                               |
13	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
14	|                      TTL                      |
15	|                                               |
16	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
17	|                  UNKNOWN (2)                  |
18	|                                               |
19	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
20	|                   TIMESTAMP                   |
21	|                                               |
22	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
23	/                     RDATA                     /
24	/                                               /
25	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Unknown 1 is a difficult value to interpret. It may contain several separate fields, however as none appear easy to decipher they were left as a single block in the map. Testing shows that \u201cunknown 1\u2033 has the following values:
view source
print?
1	                                1  1  1  1  1  1
2	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
3	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
4	|           5           |     AdvRecordType     |
5	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
6	|           0           |           0           |
7	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Edit: The structure of Unknown 1 is as follows.
view source
print?
1	                                1  1  1  1  1  1
2	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
3	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
4	|        VERSION        |     AdvRecordType     |
5	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
6	|                     FLAGS                     |
7	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Modifying the first byte to any (decimal) value other than 5 will cause the record to vanish from the DNS system. It will remain in the directory, but appears to render it useless. Edit: 5 is the Version number and is a static value.

The second byte, termed AdvRecordType, appears to have a number of possible values. Experimentation shows that Root Hints have the value set to decimal 8, out-of-zone records (normally Glue for NS Records) have 128, delegations within a zone have 130 and everything else has 240. A larger data set than I have available is required to draw conclusions other than those.

Edit: The values for AdvRecordType, referred to as Rank in the documentation above are represented by this Enumeration.
view source
print?
01	public enum RankFlag : uint
02	{
03	  // The record came from the cache.
04	  CacheBit = 1,
05	  // The record is a preconfigured root hint.
06	  RootHint = 8,
07	  // This value is not used.
08	  OutsideGlue = 32,
09	  // The record was cached from the additional section of a
10	  // nonauthoritative response.
11	  CacheNAAdditional = 49,
12	  // The record was cached from the authority section of a
13	  // nonauthoritative response.
14	  CacheNAAuthority = 65,
15	  // The record was cached from the additional section of an
16	  // authoritative response.
17	  CacheAAdditional = 81,
18	  // The record was cached from the answer section of a
19	  // nonauthoritative response.
20	  CacheNAAnswer = 97,
21	  // The record was cached from the authority section of an
22	  // authoritative response.
23	  CacheAAuthority = 113,
24	  // The record is a glue record in an authoritative zone.
25	  Glue = 128,
26	  // The record is a delegation (type NS) record in an
27	  // authoritative zone.
28	  NSGlue = 130,
29	  // The record was cached from the answer section of an
30	  // authoritative response.
31	  CacheAAnswer = 193,
32	  // The record comes from an authoritative zone.
33	  Zone = 240
34	 }

The final two bytes appear to be set to 0 in all instances. Edit: Referred to as Flags, the value must be 0.

Edit: Unknown 2 is reserved for future use and should be set to 0 in all cases.
Structures: RDATA

Each of the structures below is a minimal representation of the record data, the structures show single-label names. In each case the \u201cLabel Length\u201d and \u201cData\u201d structures repeat where multiple labels are used, this also applies to \u201cResponsible Person\u201d in the SOA record.
A

The RDATA block for the A record is a static 4 byte (32 bit) field. Each byte represents an octet in the IP address.
view source
print?
1	                                1  1  1  1  1  1
2	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
3	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
4	|                     DATA                      |
5	|                                               |
6	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
CNAME and NS
view source
print?
01	                                1  1  1  1  1  1
02	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
03	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
04	|         LENGTH        |   NUMBER OF LABELS    |
05	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
06	|      LABEL LENGTH     |                       |
07	|--+--+--+--+--+--+--+--+                       |
08	/                     DATA                      /
09	/                                               /
10	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
MX
view source
print?
01	                                1  1  1  1  1  1
02	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
03	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
04	|                    PRIORITY                   |
05	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
06	|         LENGTH        |   NUMBER OF LABELS    |
07	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
08	|      LABEL LENGTH     |                       |
09	|--+--+--+--+--+--+--+--+                       |
10	/                     DATA                      /
11	/                                               /
12	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
SOA
view source
print?
01	                                1  1  1  1  1  1
02	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
03	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
04	|                     SERIAL                    |
05	|                                               |
06	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
07	|                    REFRESH                    |
08	|                                               |
09	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
10	|                     RETRY                     |
11	|                                               |
12	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
13	|                    EXPIRE                     |
14	|                                               |
15	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
16	|                  MINIMUM TTL                  |
17	|                                               |
18	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
19	|         LENGTH        |   NUMBER OF LABELS    |
20	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
21	|      LABEL LENGTH     |                       |
22	+--+--+--+--+--+--+--+--+                       |
23	/                     DATA                      /
24	/                                               /
25	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
26	|         LENGTH        |   NUMBER OF LABELS    |
27	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
28	|      LABEL LENGTH     |                       |
29	|--+--+--+--+--+--+--+--+                       |
30	/               RESPONSIBLE PERSON              /
31	/                                               /
32	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
SRV
view source
print?
01	                                1  1  1  1  1  1
02	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
03	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
04	|                    PRIORITY                   |
05	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
06	|                     WEIGHT                    |
07	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
08	|                      PORT                     |
09	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
10	|         LENGTH        |   NUMBER OF LABELS    |
11	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
12	|      LABEL LENGTH     |                       |
13	|--+--+--+--+--+--+--+--+                       |
14	/                     DATA                      /
15	/                                               /
16	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
TXT
view source
print?
1	                                1  1  1  1  1  1
2	  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
3	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
4	|      LENGTH           |                       |
5	|--+--+--+--+--+--+--+--+                       |
6	/                     DATA                      /
7	/                                               /
8	+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

No related posts.

Related posts brought to you by Yet Another Related Posts Plugin.
One Response to this post.

   1.

      Posted by John Cardenas on 18.06.09 at 10:44 am

      I was doing the same thing late summer. I was writing a comprehensive DNS Health check web portal and needed to get to the Dynamic vs. Static for records of AD-Integrated DNS zones. I was doing this from Linux machine using ldapsearch with -t flag to capture the dnsnode BLOBs. I used Linux od (octal dump) to index into all the various integer data types, which made my effort trivial. The only non-trivial part is the revese-engineering process. Why doesn\u2019t Microsoft just publish this? Anyway, when I first started out, I captured field names from LDP.exe queries, assuming that whoever wrote it understands the real BLOB structure. Maybe these field names will help or confuse matters more? I believe your unknown_1 is actully 3 fields, the last of which is a little-endian storing bit-level flags of various meanings. Since it was reverse-engineered with minimal data, I also do not guarantee any of this to be correct! :)

      Reverse Engineer of dnsRecord attribute BLOB \u2013 a work in progress
      view source
      print?
      01	Bytes  Field            Data Type  Meaning
      02	-----  -----            ---------  -------
      03	1-2    wDataLength      16-bit int  declares RR variable length
      04	3-4    wType            16-bit int  DNS RR Type (Standard)
      05	5      Version          8-bit int   ?, values seen = 5
      06	6      Rank             8-bit int   ?, values seen = 240
      07	7-8    wFlags           16 bits     presumably various bit flags?
      08	9-12   dwSerial         32-bit int  ? you show this as zone serial number upon update
      09	13-16  dwTtlSeconds     32-bit int
      10	17-20  dwTimeout        32-bit int  ? Zone-level TTL?
      11	21-24  dwStartRefreshHr 32-bit int  record timestamp 0 for STATIC!
      12	25     RRval_len        8-bit uint  byte length of RR string value
      13	26     wNumLabels       8-bit uint  Number of DNS RR labels
      14	27     label_len1       8-bit uint  size of first label
      15	28 - X label_chars_lens 8-bit uints rest of labelsizes and labels


